public class Lesson_70_PasswordEncryptionInDB {
    // Мы уже знакомы с записью в базе данных, когда пароль зашифрован, разработчики Spring рекомендуют
    // использовать алгоритм bcrypt. В чем его особенность? Дело в том, что этот алгоритм
    // предоставляет возможность одностороннего шифрования, это означает, что введенный пароль
    // с помощью алгоритма шифрования преобразовывается в пароль, который хранится в базе данных.
    // Способа получить пароль обратно из зашифрованного состояния просто не существует.
    // Зашифруем пароли мы с помощью онлайн-кодировщика, а сохраним в базу скриптом:
//    update my_db.users set password =
//    '{bcrypt}$2a$10$xfNdZV.pDWIXFB1VzhtjKe2PRZmc7aSpnCoItPoefwTCepi788MeO' where username = 'art';
    // пароль и пользователь будут меняться соответственно.

    // Касательно самого алгоритма шифрования. Прогоняя наш пароль через алгоритм шифрования
    // мы каждый раз будем получать новую последовательность символов. Но у нас то сохранена
    // определенная последовательность, как Spring понимает, что пароль подходящий?
    // Для понимания этого момента немного углубимся в механизм шифрования bcrypt.
    // bcrypt(текстовый пароль+соль) = шифрованный пароль. Что за соль? Соль - это некая строка,
    // каждый раз она генерируется заново, поэтому и на выходе мы имеем разные пароли.
    // Однако информация об этой строке содержится в зашифрованном пароле.
    // Когда мы вводим пароль для какого-то пользователя, Spring извлекает соль из своего
    // зашифрованного пароля, прибавляет к ней пароль который мы ввели и прогоняет
    // через алгоритм шифрования. Полученный результат сравнивается с тем, который
    // записан в базе данных./
}
